-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | h3 scales that map to colours
--   
--   Scales that map to colours
@package h3-colour
@version 0.0.1


-- | Scales that assign colours to values.
module Data.H3.Colour

-- | Create a scale that maps discrete values to colours. Colours will
--   repeat if there are more than 12 different values.
ordinalColours :: [a] -> ScaleOptions OrdinalColours a (Colour Double)
data OrdinalColours a

-- | This type represents the human preception of colour. The <tt>a</tt>
--   parameter is a numeric type used internally for the representation.
--   
--   The <a>Monoid</a> instance allows one to add colours, but beware that
--   adding colours can take you out of gamut. Consider using <a>blend</a>
--   whenever possible.
data Colour a
data PaletteType
Sequential :: PaletteType
Diverging :: PaletteType
Qualitative :: PaletteType

-- | Get a palette of the specified size for a palette type. The actual
--   size of the palette may be smaller or larger than the argument.
paletteFor :: PaletteType -> Int -> [Colour Double]

-- | Convert a colour to hexadecimal form so that it can be used in style
--   attributes. Example: "#00aaff"
toCSSColour :: Colour Double -> String
instance GHC.Generics.Generic Data.H3.Colour.PaletteType
instance GHC.Show.Show Data.H3.Colour.PaletteType
instance GHC.Classes.Ord Data.H3.Colour.PaletteType
instance GHC.Classes.Eq Data.H3.Colour.PaletteType
instance (GHC.Classes.Ord a, GHC.Classes.Eq a) => Data.H3.Scalable.Scalable Data.H3.Colour.OrdinalColours a (Data.Colour.Internal.Colour GHC.Types.Double)
