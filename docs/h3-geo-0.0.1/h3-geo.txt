-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Read shapefiles and project geometric shapes with h3
--   
--   This library implements geometric projects using the
--   <a>Data.H3.Scalable.Scalable</a> type class. Conveniences for reading
--   shapefiles are also provided.
@package h3-geo
@version 0.0.1

module Data.H3.Geo.Types
newtype Point a
Point :: (a, a) -> Point a
[getPoint] :: Point a -> (a, a)

-- | Point iso
_Point :: forall p f a b. (Profunctor p, Functor f) => p (Point a) (f (Point b)) -> p (a, a) (f (b, b))
newtype Polygon a
Polygon :: NonEmpty a -> Polygon a
[getPolygon] :: Polygon a -> NonEmpty a

-- | Polygon iso
_Polygon :: forall p f a b. (Profunctor p, Functor f) => p (Polygon a) (f (Polygon b)) -> p (NonEmpty a) (f (NonEmpty b))
newtype WGS84
WGS84 :: Point Degrees -> WGS84
[getWGS84] :: WGS84 -> Point Degrees

-- | Point in WGS84 format
_WGS84 :: forall p f. (Profunctor p, Functor f) => p WGS84 (f WGS84) -> p (Point Degrees) (f (Point Degrees))
newtype Radians
Radians :: Double -> Radians
[getRadians] :: Radians -> Double

-- | Angle in radians
_Radians :: forall p f. (Profunctor p, Functor f) => p Radians (f Radians) -> p Double (f Double)
newtype Degrees
Degrees :: Double -> Degrees
[getDegrees] :: Degrees -> Double

-- | Angle in degrees
_Degrees :: forall p f. (Profunctor p, Functor f) => p Degrees (f Degrees) -> p Double (f Double)
_DegRad :: forall p f. (Profunctor p, Functor f) => p Degrees (f Degrees) -> p Radians (f Radians)
fromRad :: Radians -> Degrees
toRad :: Degrees -> Radians
instance GHC.Generics.Generic Data.H3.Geo.Types.WGS84
instance GHC.Show.Show Data.H3.Geo.Types.WGS84
instance GHC.Classes.Ord Data.H3.Geo.Types.WGS84
instance GHC.Classes.Eq Data.H3.Geo.Types.WGS84
instance GHC.Float.Floating Data.H3.Geo.Types.Degrees
instance GHC.Real.Fractional Data.H3.Geo.Types.Degrees
instance GHC.Num.Num Data.H3.Geo.Types.Degrees
instance GHC.Generics.Generic Data.H3.Geo.Types.Degrees
instance GHC.Show.Show Data.H3.Geo.Types.Degrees
instance GHC.Classes.Ord Data.H3.Geo.Types.Degrees
instance GHC.Classes.Eq Data.H3.Geo.Types.Degrees
instance GHC.Float.Floating Data.H3.Geo.Types.Radians
instance GHC.Real.Fractional Data.H3.Geo.Types.Radians
instance GHC.Num.Num Data.H3.Geo.Types.Radians
instance GHC.Generics.Generic Data.H3.Geo.Types.Radians
instance GHC.Show.Show Data.H3.Geo.Types.Radians
instance GHC.Classes.Ord Data.H3.Geo.Types.Radians
instance GHC.Classes.Eq Data.H3.Geo.Types.Radians
instance Data.Semigroup.Foldable.Class.Foldable1 Data.H3.Geo.Types.Polygon
instance Data.Foldable.Foldable Data.H3.Geo.Types.Polygon
instance GHC.Base.Functor Data.H3.Geo.Types.Polygon
instance GHC.Generics.Generic (Data.H3.Geo.Types.Polygon a)
instance GHC.Show.Show a => GHC.Show.Show (Data.H3.Geo.Types.Polygon a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.H3.Geo.Types.Polygon a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.H3.Geo.Types.Polygon a)
instance GHC.Base.Functor Data.H3.Geo.Types.Point
instance GHC.Generics.Generic (Data.H3.Geo.Types.Point a)
instance GHC.Show.Show a => GHC.Show.Show (Data.H3.Geo.Types.Point a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.H3.Geo.Types.Point a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.H3.Geo.Types.Point a)

module Data.H3.Geo.Shapefile

-- | Load a shapefile using the readshp library. TODO: If the shapefile
--   comes with a .prj file then that should be consulted to determine the
--   format of the coordinates (we just assume it's WGS 84 here)
loadShapeFromFile :: FilePath -> IO (Either String (NonEmpty (Polygon WGS84)))
toShape :: ShpRec -> Either String (NonEmpty (Polygon WGS84))
mkShape :: RecContents -> Either String (NonEmpty (Polygon WGS84))
toLabels :: ShpRec -> [String]
getLabel :: DbfRecord -> Maybe String


-- | Scales for projecting geographic coordinates onto a 2D plane.
module Data.H3.Geo.Projection
data Mercator a

-- | Construct a mercator projection that maps the given "rectangle" of
--   coordinates to the target rectangle
mercator :: (Point Radians, Point Radians) -> NullMeridian -> ScaleOptions Mercator (Point Radians) (Double, Double)

-- | Null meridian used for mercator projection (in degrees)
newtype NullMeridian
NullMeridian :: Degrees -> NullMeridian
[getNullMeridian] :: NullMeridian -> Degrees

-- | <pre>
--   greenwich = NullMeridian 0
--   </pre>
greenwich :: NullMeridian
data Albers a

-- | Albers projection
--   (https:/<i>en.wikipedia.org</i>wiki/Albers_projection). Sensible
--   values for first and second standard parallels are 20째N<i>50째N or
--   15째N</i>45째N
albers :: (Point Radians, Point Radians) -> Point Radians -> Radians -> Radians -> ScaleOptions Albers (Point Radians) (Double, Double)

-- | Albers projection
--   (https:/<i>en.wikipedia.org</i>wiki/Albers_projection) using 15 and 45
--   degrees for the standard parallels.
albers' :: (Point Radians, Point Radians) -> Point Radians -> ScaleOptions Albers (Point Radians) (Double, Double)

-- | Additional parameters for the scale (other than target range).
instance Data.H3.Scalable.Scalable Data.H3.Geo.Projection.Albers (Data.H3.Geo.Types.Point Data.H3.Geo.Types.Radians) (GHC.Types.Double, GHC.Types.Double)
instance Data.H3.Scalable.Scalable Data.H3.Geo.Projection.Mercator (Data.H3.Geo.Types.Point Data.H3.Geo.Types.Radians) (GHC.Types.Double, GHC.Types.Double)

module Data.H3.Geo
