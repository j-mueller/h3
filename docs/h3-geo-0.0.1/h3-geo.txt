-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Read shapefiles and project geometric shapes with h3
--   
--   This library implements geometric projects using the
--   <a>Data.H3.Scalable.Scalable</a> type class. Conveniences for reading
--   shapefiles are also provided.
@package h3-geo
@version 0.0.1

module Data.H3.Geo.Types
newtype Point a
Point :: (a, a) -> Point a
[getPoint] :: Point a -> (a, a)

-- | Point iso
_Point :: forall p f a b. (Profunctor p, Functor f) => p (Point a) (f (Point b)) -> p (a, a) (f (b, b))
newtype Polygon a
Polygon :: NonEmpty a -> Polygon a
[getPolygon] :: Polygon a -> NonEmpty a

-- | Polygon iso
_Polygon :: forall p f a b. (Profunctor p, Functor f) => p (Polygon a) (f (Polygon b)) -> p (NonEmpty a) (f (NonEmpty b))
newtype WGS84
WGS84 :: Point Double -> WGS84
[getWGS84] :: WGS84 -> Point Double

-- | Point in WGS84 format
_WGS84 :: forall p f. (Profunctor p, Functor f) => p WGS84 (f WGS84) -> p (Point Double) (f (Point Double))
instance GHC.Generics.Generic Data.H3.Geo.Types.WGS84
instance GHC.Show.Show Data.H3.Geo.Types.WGS84
instance GHC.Classes.Ord Data.H3.Geo.Types.WGS84
instance GHC.Classes.Eq Data.H3.Geo.Types.WGS84
instance Data.Semigroup.Foldable.Class.Foldable1 Data.H3.Geo.Types.Polygon
instance Data.Foldable.Foldable Data.H3.Geo.Types.Polygon
instance GHC.Base.Functor Data.H3.Geo.Types.Polygon
instance GHC.Generics.Generic (Data.H3.Geo.Types.Polygon a)
instance GHC.Show.Show a => GHC.Show.Show (Data.H3.Geo.Types.Polygon a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.H3.Geo.Types.Polygon a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.H3.Geo.Types.Polygon a)
instance GHC.Base.Functor Data.H3.Geo.Types.Point
instance GHC.Generics.Generic (Data.H3.Geo.Types.Point a)
instance GHC.Show.Show a => GHC.Show.Show (Data.H3.Geo.Types.Point a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Data.H3.Geo.Types.Point a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Data.H3.Geo.Types.Point a)

module Data.H3.Geo.Shapefile

-- | Load a shapefile using the readshp library. TODO: If the shapefile
--   comes with a .prj file then that should be consulted to determine the
--   format of the coordinates (we just assume it's WGS 84 here)
loadShapeFromFile :: FilePath -> IO (Either String (NonEmpty (Polygon WGS84)))
toShape :: ShpRec -> Either String (NonEmpty (Polygon WGS84))
mkShape :: RecContents -> Either String (NonEmpty (Polygon WGS84))
toLabels :: ShpRec -> [String]
getLabel :: DbfRecord -> Maybe String


-- | Scales for projecting geographic coordinates onto a 2D plane.
module Data.H3.Geo.Projection
data Mercator a

-- | Construct a mercator projection that maps the given "rectangle" of
--   coordinates to the target rectangle
mercator :: (WGS84, WGS84) -> NullMeridian -> ScaleOptions Mercator WGS84 (Double, Double)

-- | Null meridian used for mercator projection (in degrees)
newtype NullMeridian
NullMeridian :: Double -> NullMeridian
[getNullMeridian] :: NullMeridian -> Double

-- | <pre>
--   greenwich = NullMeridian 0
--   </pre>
greenwich :: NullMeridian

-- | Additional parameters for the scale (other than target range).
instance Data.H3.Scalable.Scalable Data.H3.Geo.Projection.Mercator Data.H3.Geo.Types.WGS84 (GHC.Types.Double, GHC.Types.Double)

module Data.H3.Geo
